# -*- coding: utf-8 -*-
"""01_data_cleaning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10pE4b4cEnyxW2xFej4avOryN1BFmoSBL

## **Importação Bibliotecas**
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np

pd.options.display.max_columns = 100
pd.options.display.max_rows = 1000000

"""## **Leitura dos dados**"""

# Leitura da base de dados
data = pd.read_csv('/content/drive/MyDrive/Proj. Laboratório de Ciência de Dados /data /raw/csgo_round_snapshots.csv')

# Checagem das primeiras linhas
data.head()

"""## **Verificações e Transformações**"""

# Verificação das variaveis
print(data.columns)

# Quantidade de colunas
print(f'\n Quantidade de colunas no dataframe: {len(data.columns)}')

valores_nulos_totais = data.isnull().sum()

# Verificar quais colunas têm valores nulos
colunas_com_nulos = valores_nulos_totais[valores_nulos_totais > 0].index

# Exibir os resultados
if colunas_com_nulos.empty:
    print("Não há valores nulos no DataFrame.")
else:
    print("Colunas com valores nulos:")
    print(colunas_com_nulos)

# Obtendo informações sobre os tipos de dados e contagem de valores não nulos
info_tipos_dados = data.info()

# Verificando inconsistências em colunas numéricas
colunas_numericas = data.select_dtypes(include=['number']).columns
inconsistencias_numericas = data[colunas_numericas].describe(include='all')

# Verificando inconsistências em colunas de texto
colunas_texto = data.select_dtypes(include=['object']).columns
inconsistencias_texto = data[colunas_texto].describe(include='all')

print("\n Verificação de Inconsistências em colunas numéricas:")
print(inconsistencias_numericas)

print('\n -----------------------------------------------------')

print("\n Verificação de Inconsistências em colunas de texto:")
print(inconsistencias_texto)

# Verificar duplicidade em todas as colunas
duplicatas = data.duplicated()

# Exibir linhas duplicadas (se houver)
linhas_duplicadas = data[duplicatas]
print("Linhas duplicadas:")
print(linhas_duplicadas)

# Contar o número total de linhas duplicadas
total_duplicatas = duplicatas.sum()
print(f"\nTotal de linhas duplicadas: {total_duplicatas}")

"""- Linhas duplicadas para esse Data Frame são na verdade normais, visto que é contado momentos do jogos para cada time, é feito tipo uma vigilia momento a momento"""

# Identificar linhas duplicadas
duplicatas = data.duplicated()

# Exibir linhas duplicadas (se houver)
linhas_duplicadas = data[duplicatas]
print("Linhas duplicadas:")
linhas_duplicadas.head(100)

# Verificação de dados nulos
data.isnull().sum().sum()

"""## **Salvando os dados na camada clean**"""

data.to_csv("/content/drive/MyDrive/Proj. Laboratório de Ciência de Dados /data /clear/data_clean", index=False)